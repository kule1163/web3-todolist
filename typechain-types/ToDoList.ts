/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace ToDoList {
  export type ToDoItemStruct = {
    itemId: BigNumberish;
    content: string;
    completed: boolean;
    deleted: boolean;
  };

  export type ToDoItemStructOutput = [
    itemId: bigint,
    content: string,
    completed: boolean,
    deleted: boolean
  ] & { itemId: bigint; content: string; completed: boolean; deleted: boolean };
}

export interface ToDoListInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createTodo"
      | "deleteToDoItem"
      | "getActiveToDo"
      | "getCompletedToDo"
      | "getToDos"
      | "toDoItems"
      | "updateToDoContent"
      | "updateToDoStatus"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ToDoItemId"): EventFragment;

  encodeFunctionData(functionFragment: "createTodo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "deleteToDoItem",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveToDo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCompletedToDo",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getToDos", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toDoItems",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToDoContent",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateToDoStatus",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "createTodo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteToDoItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveToDo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompletedToDo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getToDos", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toDoItems", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateToDoContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateToDoStatus",
    data: BytesLike
  ): Result;
}

export namespace ToDoItemIdEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ToDoList extends BaseContract {
  connect(runner?: ContractRunner | null): ToDoList;
  waitForDeployment(): Promise<this>;

  interface: ToDoListInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createTodo: TypedContractMethod<[_content: string], [void], "nonpayable">;

  deleteToDoItem: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getActiveToDo: TypedContractMethod<
    [],
    [ToDoList.ToDoItemStructOutput[]],
    "view"
  >;

  getCompletedToDo: TypedContractMethod<
    [],
    [ToDoList.ToDoItemStructOutput[]],
    "view"
  >;

  getToDos: TypedContractMethod<[], [ToDoList.ToDoItemStructOutput[]], "view">;

  toDoItems: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, boolean] & {
        itemId: bigint;
        content: string;
        completed: boolean;
        deleted: boolean;
      }
    ],
    "view"
  >;

  updateToDoContent: TypedContractMethod<
    [_id: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;

  updateToDoStatus: TypedContractMethod<
    [_id: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createTodo"
  ): TypedContractMethod<[_content: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deleteToDoItem"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getActiveToDo"
  ): TypedContractMethod<[], [ToDoList.ToDoItemStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getCompletedToDo"
  ): TypedContractMethod<[], [ToDoList.ToDoItemStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getToDos"
  ): TypedContractMethod<[], [ToDoList.ToDoItemStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "toDoItems"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, boolean, boolean] & {
        itemId: bigint;
        content: string;
        completed: boolean;
        deleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateToDoContent"
  ): TypedContractMethod<
    [_id: BigNumberish, _content: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateToDoStatus"
  ): TypedContractMethod<[_id: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "ToDoItemId"
  ): TypedContractEvent<
    ToDoItemIdEvent.InputTuple,
    ToDoItemIdEvent.OutputTuple,
    ToDoItemIdEvent.OutputObject
  >;

  filters: {
    "ToDoItemId(uint256)": TypedContractEvent<
      ToDoItemIdEvent.InputTuple,
      ToDoItemIdEvent.OutputTuple,
      ToDoItemIdEvent.OutputObject
    >;
    ToDoItemId: TypedContractEvent<
      ToDoItemIdEvent.InputTuple,
      ToDoItemIdEvent.OutputTuple,
      ToDoItemIdEvent.OutputObject
    >;
  };
}
